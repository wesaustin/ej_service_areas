tidycensus,
mapview
)
library(readxl)
PWSID_geodemog_data <- read_excel("data/demographics/sb_dems_area_v3.xlsx")
Lead_violations$total_violations[is.na(Lead_violations$total_violations)] <- 0
Lead_violations <- left_join(PWSID_geodemog_data, Lead_violations, by = "PWSID", relationship = "many-to-many")
View(Lead_violations)
Lead_violations <- read.csv("ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
PWSID_geodemog_data <- PWSID_geodemog_data %>%
rename(PWSID = pwsid)
Lead_violations <- left_join(PWSID_geodemog_data, Lead_violations, by = "PWSID", relationship = "many-to-many")
View(Lead_violations)
Lead_violations$total_violations[is.na(Lead_violations$total_violations)] <- 0
Lead_violations$Maximum_sample_exceedence[is.na(Lead_violations$Maximum_sample_exceedence)] <- 0
Lead_violations <- Lead_violations %>%
group_by(ID) %>%
mutate(avg_viol_CBG = mean(total_violations)) %>%
distinct(ID, .keep_all = TRUE)
##make a subset for testing, create tract-level unit of analysis
Lead_viol_AL <- Lead_violations %>%
filter(ST_ABBREV == "AL") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(AVG_tract_viol = mean(total_violations))
##Grab AL block group boundaries
AL_bg <- tigris::block_groups("AL") %>%
mutate(ID = substring(GEOID, first=2, last=12)) %>%
st_transform(crs = 4326)
AL_bg$ID <- as.numeric(AL_bg$ID)
AL_bg$ID <- as.numeric(AL_bg$ID)
##We actually only have tract-level data for AL? It appears that there is a number (0)
##missing from the CBG ID, which is why I had to substring in order to match the polygons
st_crs(AL_bg)
st_crs(health_viol_AL)
Lead_viol_AL <- left_join(AL_bg, Lead_viol_AL)
AL_bg$ID <- as.numeric(AL_bg$ID)
Lead_viol_AL <- left_join(AL_bg, Lead_viol_AL)
Lead_viol_AL$ID <- as.numeric(Lead_viol_AL$ID)
Lead_viol_AL <- left_join(AL_bg, Lead_viol_AL)
st_as_sf(Lead_viol_AL)
###Plot using ggplot2
Lead_plot_AL <- ggplot() +
geom_sf(data = Lead_viol_AL, aes(fill = avg_viol_CBG, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = AL_bg, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_AL
##NJ : CBG
Lead_viol_NJ <- Lead_violations %>%
filter(ST_ABBREV == "NJ") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(AVG_tract_viol = mean(total_violations))
NJ_bg <- tigris::block_groups("NJ") %>%
mutate(ID = GEOID) %>%
st_transform(crs = 4326)
NJ_bg$ID <- as.numeric(NJ_bg$ID)
Lead_viol_NJ <- left_join(NJ_bg, Lead_viol_NJ)
Lead_viol_NJ$ID <- as.numeric(Lead_viol_NJ$ID)
st_as_sf(Lead_viol_NJ)
Lead_viol_NJ$ID <- as.numeric(Lead_viol_NJ$ID)
Lead_viol_NJ <- left_join(NJ_bg, Lead_viol_NJ)
st_as_sf(Lead_viol_NJ)
Lead_plot_NJ <- ggplot() +
geom_sf(data = Lead_viol_NJ, aes(fill = avg_viol_CBG, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = NJ_bg, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_NJ
NJ_tract <- tigris::tracts("NJ") %>%
mutate(tract = GEOID) %>%
st_transform(crs = 4326)
Lead_viol_NJ <- left_join(NJ_tract, Lead_viol_NJ)
Lead_viol_NJ <- st_join(NJ_tract, Lead_viol_NJ)
st_as_sf(Lead_viol_NJ)
Lead_plot_NJ <- ggplot() +
geom_sf(data = Lead_viol_NJ, aes(fill = AVG_tract_viol, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = NJ_tract, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_NJ
Lead_plot_NJ
Lead_plot_NJ
rm(lead_viol_NJ)
Lead_viol_NJ <- Lead_violations %>%
filter(ST_ABBREV == "NJ") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(AVG_tract_viol = mean(total_violations))
Lead_viol_NJ <- left_join(NJ_tract, Lead_viol_NJ)
# double check if this is a st_join or a left join, i.e., is this spatially joining locations
# or is it joining by an ID
st_as_sf(Lead_viol_NJ)
Lead_plot_NJ <- ggplot() +
geom_sf(data = Lead_viol_NJ, aes(fill = AVG_tract_viol, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = NJ_tract, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_NJ
Lead_plot_NJ
Lead_plot_NJ
##Interactive map (similar to leaflet)
tmap_mode("view")
tm_shape(LCR_viol_CA) +
tm_polygons(col = "AVG_CBG_viol", midpoint = 0) +
tm_basemap("Esri.WorldTopoMap")
tmap_mode("view")
tm_shape(Lead_viol_NJ) +
tm_polygons(col = "AVG_CBG_viol", midpoint = 0) +
tm_basemap("Esri.WorldTopoMap")
tmap_mode("view")
tm_shape(Lead_viol_NJ) +
tm_polygons(col = "AVG_tract_viol", midpoint = 0) +
tm_basemap("Esri.WorldTopoMap")
LCR_lm <- lm(avg_viol_CBG ~ MINORPCT + PRE1960PCT + LOWINCPCT, data = Lead_viol_NJ)
summary(LCR_lm)
View(Lead_viol_NJ)
sum(Lead_viol_NJ$avg_viol_CBG)
mean <- mean(Lead_viol_NJ$avg_viol_CBG)
mean
describe(health_viol_NJ[c("avg_CBG_viol", "ACSTOTPOP", "MINORPCT","PRE1960PCT", "LOWINCPCT")])
install.packages("psych")
library(psych)
describe(health_viol_NJ[c("avg_CBG_viol", "ACSTOTPOP", "MINORPCT","PRE1960PCT", "LOWINCPCT")])
describe(Lead_viol_NJ[c("avg_CBG_viol", "ACSTOTPOP", "MINORPCT","PRE1960PCT", "LOWINCPCT")])
describe(Lead_viol_NJ[c("avg_viol_CBG", "ACSTOTPOP", "MINORPCT","PRE1960PCT", "LOWINCPCT")])
describe(Lead_viol_NJ[c("avg_viol_CBG")])
mean(Lead_viol_NJ$avg_viol_CBG)
mean(Lead_viol_NJ$avg_viol_CBG, na.rm= T)
summary(LCR_lm)
LCR_lm <- lm(avg_viol_CBG ~ MINORPCT + CANCER + PTRAF + PM25 + PRE1960PCT + LOWINCPCT, data = Lead_viol_NJ)
summary(LCR_lm)
setwd("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/")
##Merge the PWSID-specific indicators data with mappable geographic data
##Load health violations data and sb_dems_v3 data (containing demographic / shapefile info)
Lead_violations <- read.csv("ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
PWSID_geodemog_data <- read_excel("data/demographics/sb_dems_area_v3.xlsx")
library(readxl)
##Merge the PWSID-specific indicators data with mappable geographic data
##Load health violations data and sb_dems_v3 data (containing demographic / shapefile info)
Lead_violations <- read.csv("ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
PWSID_geodemog_data <- read_excel("data/demographics/sb_dems_area_v3.xlsx")
PWSID_geodemog_data <- PWSID_geodemog_data %>%
rename(PWSID = pwsid)
PWSID_geodemog_data <- PWSID_geodemog_data %>%
rename(PWSID = pwsid)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
readr,
tidyverse,
sf, # vector data operations
raster, # raster data operations
exactextractr, # fast raster data extraction for polygons
maps, # to get county boundary data
data.table, # data wrangling
dplyr, # data wrangling
lubridate, # Date object handling
tmap, # for map creation
modelsummary, # regression table generation
future.apply, # parallel computation
cdlTools, # download CDL data
rgdal, # required for cdlTools
prism, # download PRISM data
stringr, # string manipulation
magrittr,
tidycensus,
mapview
)
Lead_violations <- read.csv("ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
PWSID_geodemog_data <- read_excel("data/demographics/sb_dems_area_v3.xlsx")
PWSID_geodemog_data <- PWSID_geodemog_data %>%
rename(PWSID = pwsid)
##Left join the full PWSID dataset with the lead content violations data
Lead_violations <- left_join(PWSID_geodemog_data, Lead_violations, by = "PWSID", relationship = "many-to-many")
Lead_violations <- read.csv("ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
Lead_violations <- read.csv("ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
LCR_vio_cbg <- left_join(PWSID_geodemog_data, Lead_violations, by = "PWSID", relationship = "many-to-many")
View(LCR_vio_cbg)
##Left join the full PWSID dataset with the lead content violations data
LCR_vio_cbg <- left_join(PWSID_geodemog_data, Lead_violations, by = "PWSID")
LCR_vio_cbg$total_violations[is.na(LCR_vio_cbg$total_violations)] <- 0
LCR_vio_cbg$Maximum_sample_exceedence[is.na(LCR_vio_cbg$Maximum_sample_exceedence)] <- 0
LCR_vio_cbg <- LCR_vio_cbg %>%
group_by(ID) %>%
mutate(avg_viol_CBG = mean(total_violations)) %>%
distinct(ID, .keep_all = TRUE)
PWSID_geodemog_data <- PWSID_geodemog_data %>%
rename(PWSID = pwsid)      %>%
mutate(ID=str_pad(ID, 12, pad="0"))
PWSID_geodemog_data <- read_excel("data/demographics/sb_dems_area_v3.xlsx")
# Rename and convert CBG ID to string with leading 0s if necessary
PWSID_geodemog_data <- PWSID_geodemog_data %>%
rename(PWSID = pwsid)      %>%
mutate(ID=str_pad(ID, 12, pad="0"))
LCR_vio_cbg <- left_join(PWSID_geodemog_data, Lead_violations, by = "PWSID", relationship = "many-to-many")
##For tracts with PWSIDs, and null values for the number of violations, replace nulls
##with zeros
LCR_vio_cbg$total_violations[is.na(LCR_vio_cbg$total_violations)] <- 0
LCR_vio_cbg$Maximum_sample_exceedence[is.na(LCR_vio_cbg$Maximum_sample_exceedence)] <- 0
LCR_vio_cbg <- LCR_vio_cbg %>%
group_by(ID) %>%
mutate(avg_viol_CBG = mean(total_violations)) %>%
distinct(ID, .keep_all = TRUE)
##make a subset for testing, create tract-level unit of analysis
Lead_viol_AL <- LCR_vio_cbg %>%
filter(ST_ABBREV == "AL") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(AVG_tract_viol = sum(total_violations*acstotpop)/sum(acstotpop))
Lead_viol_AL <- LCR_vio_cbg %>%
filter(ST_ABBREV == "AL") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(AVG_tract_viol = sum(total_violations*ACSTOTPOP)/sum(ACSTOTPOP))
AL_bg <- tigris::block_groups("AL") %>%
st_transform(crs = 4326)
AL_bg <- tigris::block_groups("AL") %>%
st_transform(crs = 4326)  %>%
mutate(ID=str_pad(GEOID, 12, pad="0"))
st_crs(AL_bg)
Lead_vio_AL <- left_join(AL_bg, Lead_vio_AL)
Lead_vio_AL <- LCR_vio_cbg %>%
filter(ST_ABBREV == "AL") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(avg_vio_tract = sum(total_violations*ACSTOTPOP)/sum(ACSTOTPOP))
##Join by CBG
Lead_vio_AL <- left_join(AL_bg, Lead_vio_AL)
##Convert to spatial object
st_as_sf(Lead_vio_AL)
NJ_bg <- tigris::block_groups("NJ") %>%
st_transform(crs = 4326)  %>%
mutate(ID=str_pad(GEOID, 12, pad="0"))
Lead_vio_NJ <- left_join(NJ_bg, Lead_vio_NJ) ##Join by CBG
#New Jersey
Lead_vio_NJ <- LCR_vio_cbg %>%
filter(ST_ABBREV == "NJ") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(avg_vio_tract = sum(total_violations*ACSTOTPOP)/sum(ACSTOTPOP))
Lead_vio_NJ <- left_join(NJ_bg, Lead_vio_NJ) ##Join by CBG
st_as_sf(Lead_vio_NJ) ##Convert to spatial object
Lead_plot_NJ <- ggplot() +
geom_sf(data = Lead_vio_NJ, aes(fill = avg_vio_CBG, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = NJ_bg, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_NJ
################################################################################
## Load Data
################################################################################
##Load health violations data and sb_dems_v3 data (containing demographic / shapefile info)
lcr_vio <- read.csv("ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
pwsid_cbg <- read_excel("data/demographics/sb_dems_area_v3.xlsx")
# Rename and convert CBG ID to string with leading 0s if necessary
pwsid_cbg <- pwsid_cbg %>%
rename(PWSID = pwsid)      %>%
mutate(ID=str_pad(ID, 12, pad="0")) # adds a leading zero and converts to charachter length 12
################################################################################
## Merge the PWSID-specific indicators data with geographic data
################################################################################
##Left join the full PWSID dataset with the lead content violations data
LCR_vio_cbg <- left_join(pwsid_cbg, lcr_vio, by = "PWSID", relationship = "many-to-many")
##For tracts with PWSIDs, and null values for the number of violations, replace nulls
##with zeros
LCR_vio_cbg$total_violations[is.na(LCR_vio_cbg$total_violations)] <- 0
LCR_vio_cbg$Maximum_sample_exceedence[is.na(LCR_vio_cbg$Maximum_sample_exceedence)] <- 0
################################################################################
## Collapse to CBG by Water System and then tract for better visualization
################################################################################
##For tract with more than one PWSID, find average number of violations at the CBG level
##then collapse to include only 1 observation per CBG
##Here I keep only the calculated avg. number of violations per tract, the max exceedence, when the sample
##was taken, and the relevant IDs numbers
###Then, collapse to the census tract level (11-digit "ID")
LCR_vio_cbg <- LCR_vio_cbg %>%
group_by(ID) %>%
mutate(avg_viol_CBG = mean(total_violations)) %>%
distinct(ID, .keep_all = TRUE)
##make a subset for testing, create tract-level unit of analysis
#Alabama
Lead_vio_AL <- LCR_vio_cbg %>%
filter(ST_ABBREV == "AL") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(avg_vio_tract = sum(total_violations*ACSTOTPOP)/sum(ACSTOTPOP))
#New Jersey
Lead_vio_NJ <- LCR_vio_cbg %>%
filter(ST_ABBREV == "NJ") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(avg_vio_tract = sum(total_violations*ACSTOTPOP)/sum(ACSTOTPOP))
################################################################################
## Download Census Division Boundaries for Alabama and New Jersey
## and Join to LCR data
################################################################################
##Grab AL block group boundaries
AL_bg <- tigris::block_groups("AL") %>%
st_transform(crs = 4326)  %>%
mutate(ID=str_pad(GEOID, 12, pad="0"))
Al_tract <- tigris::tracts("AL") %>%
mutate(tract=str_pad(GEOID, 11, pad="0")) %>%
st_transform(crs = 4326)
st_crs(AL_bg)
st_crs(Al_tract)
Lead_vio_AL <- left_join(AL_tract, Lead_vio_AL) ##Join by CBG
AL_tract <- tigris::tracts("AL") %>%
mutate(tract=str_pad(GEOID, 11, pad="0")) %>%
st_transform(crs = 4326)
Lead_vio_AL <- left_join(AL_tract, Lead_vio_AL) ##Join by CBG
st_as_sf(Lead_vio_AL) ##Convert to spatial object
NJ_bg <- tigris::block_groups("NJ") %>%
mutate(ID=str_pad(GEOID, 12, pad="0")) %>%
st_transform(crs = 4326)
NJ_tract <- tigris::tracts("NJ") %>%
mutate(tract=str_pad(GEOID, 11, pad="0")) %>%
st_transform(crs = 4326)
Lead_vio_NJ <- left_join(NJ_tract, Lead_viol_NJ)
Lead_plot_AL <- ggplot() +
geom_sf(data = Lead_vio_AL, aes(fill = avg_vio_CBG, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = AL_bg, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_AL
Lead_plot_AL <- ggplot() +
geom_sf(data = Lead_vio_AL, aes(fill = avg_vio_tract, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = AL_bg, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_AL
# Map 1 - Alabama GGPLOT
###Plot using ggplot2
Lead_plot_AL <- ggplot() +
geom_sf(data = Lead_vio_AL, aes(fill = avg_vio_tract, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = AL_bg, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_AL
Lead_plot_AL <- ggplot() +
geom_sf(data = Lead_vio_AL, aes(fill = avg_vio_tract, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = AL_bg, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_AL
Lead_plot_NJ <- ggplot() +
geom_sf(data = Lead_vio_NJ, aes(fill = avg_vio_tract, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = NJ_tract, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_NJ
st_crs(NJ_bg)
st_crs(NJ_tract)
#New Jersey
Lead_vio_NJ <- LCR_vio_cbg %>%
filter(ST_ABBREV == "NJ") %>%
mutate(tract = substring(ID, first=1, last=11)) %>%
group_by(tract) %>%
mutate(avg_vio_tract = sum(total_violations*ACSTOTPOP)/sum(ACSTOTPOP))
Lead_vio_NJ <- left_join(NJ_tract, Lead_vio_NJ)
st_as_sf(Lead_vio_NJ) ##Convert to spatial object
Lead_plot_NJ <- ggplot() +
geom_sf(data = Lead_vio_NJ, aes(fill = avg_vio_tract, geometry = geometry)) +
scale_fill_viridis_c(option="plasma", na.value = "white") +
geom_sf(data = NJ_tract, fill = NA) +
ggthemes::theme_map() +
theme(legend.position = "right")
Lead_plot_NJ
tmap_mode("view")
tm_shape(Lead_vio_NJ) +
tm_polygons(col = "avg_vio_tract", midpoint = 0) +
tm_basemap("Esri.WorldTopoMap")
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ZIP_Codes_Served/Dissolved_ZIP_Codes_Served.shp")
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
# Rename geom to geometry so that the EJfunction doesn't trip
sb_sf <- st_set_geometry(sb_sf, "geometry")
# Map The Sites - or a subset for speed
#mapview(sb_sf)
sb_sf_subset <- sb_sf[1:1000,]
mapview(sb_sf_subset)
mapview(sb_sf)
# requires devtools to install
install.packages('devtools')
library(devtools)
# install from repository
install_github('USEPA/EJSCREENbatch', build_vignettes=FALSE)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
install.packages("devtools")
library(EJSCREENbatch)
zipcodes <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0,
raster = T)
zipcodes <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0,
raster = T)
library(tidyverse)
library(sf)
library(leaflet)
library(tigris)
#if not in project subfolder, navigate to main folder
if(str_detect(getwd(), "ej_service_areas/")){
getwd()
setwd('../..')
getwd()
}
#if subfolder for County boundaries does not exist, create it
mainDir <- "Data/generated_boundaries/"
subDir <- "generated_boundaries_county"
dir.create(file.path(mainDir, subDir))
#get national County map
counties_map <- counties(cb=T, resolution="20m")
counties_crs <- st_crs(counties_map)
getwd()
getwd()
#if not in project subfolder, navigate to main folder
if(str_detect(getwd(), "NCEE - Water System Service Boundaries/")){
getwd()
setwd('../..')
getwd()
}
#if subfolder for County boundaries does not exist, create it
mainDir <- "data/generated_boundaries/"
subDir <- "generated_boundaries_county"
dir.create(file.path(mainDir, subDir))
#if subfolder for County boundaries does not exist, create it
mainDir <- "data/generated_boundaries/"
subDir <- "generated_boundaries_county"
dir.create(file.path(mainDir, subDir))
#if subfolder for County boundaries does not exist, create it
mainDir <- "data/generated_boundaries"
subDir <- "generated_boundaries_county"
dir.create(file.path(mainDir, subDir))
#if subfolder for County boundaries does not exist, create it
mainDir <- "Data/generated_boundaries/"
subDir <- "generated_boundaries_county"
dir.create(file.path(mainDir, subDir))
library(tidyverse)
library(sf)
library(leaflet)
library(tigris)
#if not in project subfolder, navigate to main folder
if(str_detect(getwd(), "ej_service_areas/")){
getwd()
setwd('../..')
getwd()
}
#if subfolder for County boundaries does not exist, create it
mainDir <- "Data/generated_boundaries/"
subDir <- "generated_boundaries_county"
dir.create(file.path(mainDir, subDir))
#if subfolder for County boundaries does not exist, create it
mainDir <- "data/generated_boundaries/"
subDir <- "generated_boundaries_county"
dir.create(file.path(mainDir, subDir))
#if subfolder for County boundaries does not exist, create it
mainDir <- "data/generated_boundaries"
subDir <- "generated_boundaries_county"
dir.create(file.path(mainDir, subDir))
getwd()
#if not in project subfolder, navigate to main folder
if(str_detect(getwd(), "ej_service_areas/")){
getwd()
setwd('../..')
getwd()
}
getwd()
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/epic_boundaries/temm.gpkg") %>%
dplyr::select(pwsid, pws_nam) %>%
st_transform(counties_crs)
sb <- st_read("NCEE - Water System Service Boundaries/epic_boundaries/temm.gpkg")
getwd()
county_boundaries_using_EPIC <- st_read("NCEE - Water System Service Boundaries/epic_boundaries/temm.gpkg") %>%
dplyr::select(pwsid, pws_name) %>%
st_transform(counties_crs) %>%
st_join(counties_map, join=st_intersection) %>%
ungroup %>%
mutate(area_county = st_area(geometry))
library(tidyverse)
library(data.table)
library(sf)
library(tidycensus)
library(leaflet)
options(tigris_use_cache = TRUE)
