totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
# tabulate Analyte Names
syr3 %>%
group_by(analyte_name) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 120)
bact3 <- -syr3 %>%
filter(analyte_name == c("COLIFORM (TCR)","E. COLI"))
bact3 <- syr3 %>%
filter(analyte_name == c("COLIFORM (TCR)","E. COLI"))
bact3 <- syr3 %>%
filter(analyte_name == c("COLIFORM (TCR)","E. COLI","HETEROTROPHIC BACTERIA (HPC OR SPC)"))
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
load(paste0(syr_dir,"syr4.RData"))
rm(syr3)
syr_dir <- 'C:\Users\gaustin\OneDrive - Environmental Protection Agency (EPA)\DWDB\Data\mdi\syr\'
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
load("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/syr4.Rdata")
# Tabulate Analyte Names
data %>%
group_by(analyte_name) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 120)
# filter out DBPs and bacterial samples
dbp4 <- data %>%
filter(analyte_name == c("TTHM","TOTAL HALOACETIC ACIDS (HAA5)"))
bact4 <- data %>%
filter(analyte_name == c("COLIFORM (TCR)","E. COLI","HETEROTROPHIC BACTERIA (HPC OR SPC)"))
rm(data)
dbp3 %>%
rename(analyte_id = analyte_code)
rm(dbp)
rm(bact)
dbp3 %>%
rename(analyte_code = analyte_id)
dbp3 <- dbp3 %>%
rename(analyte_code = analyte_id)
bact3 <- bact3 %>%
rename(analyte_code = analyte_id)
# append datasets
dbp <- rbind(dbp3, dbp4) %>%
rename(pwsid = pws_id)
bact <- rbind(bact3, bact4) %>%
rename(pwsid = pws_id)
bact <- rbind(bact3, bact4) %>%
rename(pwsid = pws_id)
rm(dbp3, bact3, dbp4, bact4) # clear space
write.csv(bact, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/6yr review/processed/syr_col.csv", row.names=FALSE)
write.csv(dbp, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/6yr review/processed/syr_dbp.csv", row.names=FALSE)
View(dbp)
dbp %>%
group_by(unit) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 120)
dbp_indicator_tthm <- dbp %>%
filter(analyte_name == c("TTHM")) %>%
mutate(result_value = ifelse(detect == 0, 0, result_value)) %>%
group_by(pwsid ) %>%
mutate(tthm= mean(result)) %>%
distinct(pwsid, .keep_all = TRUE) %>%
select(pwsid, haa5)
dbp_indicator_tthm <- dbp %>%
filter(analyte_name == c("TTHM")) %>%
mutate(result_value = ifelse(detect == 0, 0, result_value)) %>%
group_by(pwsid ) %>%
mutate(tthm= mean(result_value)) %>%
distinct(pwsid, .keep_all = TRUE) %>%
select(pwsid, haa5)
dbp_indicator_tthm <- dbp %>%
filter(analyte_name == c("TTHM")) %>%
mutate(result_value = ifelse(detect == 0, 0, result_value)) %>%
group_by(pwsid ) %>%
mutate(tthm= mean(result_value)) %>%
distinct(pwsid, .keep_all = TRUE) %>%
select(pwsid, tthm)
dbp_indicator_haa5 <- dbp %>%
filter(analyte_code == c("2456")) %>%
mutate(result_value = ifelse(detect == 0, 0, result_value)) %>%
group_by(pwsid ) %>%
mutate(haa5= mean(result_value)) %>%
distinct(pwsid, .keep_all = TRUE) %>%
select(pwsid, haa5)
join_dbp_inds <- left_join(dbp_indicator_tthm, dbp_indicator_haa5, by = "pwsid" )
View(join_dbp_inds)
join_dbp_inds  <- join_dbp_inds %>%
mutate(combined_dbp = tthm + haa5)
tcr_indicator <- bact %>%
filter(analyte_name == c("COLIFORM (TCR)")) %>%
group_by(pwsid ) %>%
mutate(total_samples = n())
tcr_indicator <- bact %>%
filter(analyte_name == c("COLIFORM (TCR)")) %>%
group_by(pwsid ) %>%
mutate(total_samples = n()) %>%
mutate(detection = ifelse(presence_indicator_code == "P", 1, detection)) %>%
tcr_indicator <- bact %>%
filter(analyte_name == c("COLIFORM (TCR)")) %>%
group_by(pwsid ) %>%
mutate(total_samples = n()) %>%
mutate(detection = ifelse(presence_indicator_code == "P", 1, detection))
tcr_indicator <- bact %>%
filter(analyte_name == c("COLIFORM (TCR)")) %>%
group_by(pwsid ) %>%
mutate(total_samples = n()) %>%
mutate(detection = ifelse(presence_indicator_code == "P", 1, 0))
tcr_indicator <- tcr_indicator %>%
group_by(pwsid ) %>%
mutate(detection_share = mean(detection))   %>%
distinct(pwsid, .keep_all = TRUE) %>%
select(pwsid, detection_share)
library(ggplot2)
hist(tcr_indicator$detection_share, main ="Total Coliform Detection Share by System", col = "lightblue",border = "black")
hist(join_dbp_inds$combined_dbp,
main ="Total DBP Concentration by Water System",
xlab="Combined Concentration (ug/l)",
col = "lightblue",
border = "black")
output_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/data/indicators/'
write.csv(joined_dbp_inds, paste0(output_dir,"indicator_dbp.csv", row.names=FALSE ))
write.csv(join_dbp_inds, paste0(output_dir,"indicator_dbp.csv", row.names=FALSE ))
write.csv(tcr_indicator, paste0(output_dir,"indicator_tcr.csv", row.names=FALSE ))
write.csv(join_dbp_inds, paste0(output_dir,"indicator_dbp.csv"), row.names=FALSE ))
write.csv(join_dbp_inds, paste0(output_dir,"indicator_dbp.csv"), row.names=FALSE )
write.csv(tcr_indicator, paste0(output_dir,"indicator_tcr.csv"), row.names=FALSE )
hist(tcr_indicator$detection_share,
main ="Total Coliform Detection Share by System",
xlab="Detection Share",
col = "lightblue",
border = "black")
library(tidyverse)
library(data.table)
library(sf)
library(tidycensus)
library(leaflet)
options(tigris_use_cache = TRUE)
us_states <- get_acs(
geography = "state",
variables = "B01002_001",
year = 2019,
survey = "acs1",
geometry = TRUE,
resolution = "20m"
) %>%
st_transform(4326)
st_crs(us_states)
plot(us_states$geometry)
#==============================================================================
#---------------------------ZIP CODES------------------------------------------
#==============================================================================
#Use UCMR 3 & 4 for now. Can add or replace with UCMR 5 later when available.
# ucmr5 <- https://www.epa.gov/dwucmr/occurrence-data-unregulated-contaminant-monitoring-rule#5
zip_links <- c("https://www.epa.gov/sites/default/files/2017-02/ucmr-3-occurrence-data.zip",
"https://www.epa.gov/sites/default/files/2020-04/ucmr_4_occurrence_data.zip",
"https://www.epa.gov/system/files/other-files/2023-08/ucmr5-occurrence-data.zip")
names(zip_links) <- c("ucmr3", "ucmr4", "ucmr5")
for(i in 1:length(zip_links)){
temp <- tempfile()
download.file(zip_links[i],temp)
con <- unz(temp, paste0(toupper(names(zip_links)[i]),"_ZipCodes.txt"))
data.zip <- read.table(con, header=T, skip=0, fill=T) %>%
write_csv(paste0("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/ucmr/zipcode_areas/",names(zip_links)[i],".csv"))
head(data.zip)
assign(names(zip_links)[i], data.zip)
unlink(temp)
}
#---------------------------Combine ZipCodes------------------------------------
zipcodes <- list(ucmr3, ucmr4, ucmr5) %>%
reduce(rbind) %>%
mutate(ZIPCODE = str_replace_all(ZIPCODE, "-", ""),
ZIPCODE_numeric = as.numeric(ZIPCODE)) %>%
group_by(PWSID, ZIPCODE_numeric) %>%
mutate(dup = max(row_number()),
row_n = row_number(),
to_delete = ifelse(dup>1 & row_n>1,1,0)) %>%
arrange(-dup, ZIPCODE_numeric, row_n) %>%
filter(to_delete==0) %>%
dplyr::select(PWSID, ZIPCODE, ZIPCODE_numeric)
#install.packages('devtools')
library(devtools)
# install from repository
#install_github('USEPA/EJSCREENbatch', build_vignettes=FALSE)
library(EJSCREENbatch)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
###############################################################################
# Import Locations
###############################################################################
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ZIP_Codes_Served/UCMR_3_5/generated_boundaries_using_zip_codes.shp")
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
sb_sf$state <- substr(sb_sf$PWSID,1,2)
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ZIP_Codes_Served/UCMR_3_5/generated_boundaries_using_zip_codes.shp")
#---------------------------Zip Boundaries--------------------------------------
#Generate zip code boundaries for each PWSID
zipcodeboundaries <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/ucmr/zipcode_areas/tl_2019_us_zcta510/tl_2019_us_zcta510.shp") %>%
st_transform(4326) %>%
mutate(ZIPCODE_numeric = as.numeric(ZCTA5CE10))  %>%
left_join(zipcodes) %>%
filter(!is.na(PWSID)) %>%
group_by(PWSID) %>%
summarize(geometry = st_union(geometry))
st_write(zipcodeboundaries, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ZIP_Codes_Served/UCMR_3_5/generated_boundaries_using_zip_codes.shp")
zc_data <- EJfunction(LOI_data = zipcodeboundaries,
data_year = 2021,
buffer = 0.0001,
raster = T)
#install.packages('devtools')
library(devtools)
# install from repository
#install_github('USEPA/EJSCREENbatch', build_vignettes=FALSE)
library(EJSCREENbatch)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ZIP_Codes_Served/UCMR_3_5/generated_boundaries_using_zip_codes.shp")
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
sb_sf$state <- substr(sb_sf$PWSID,1,2)
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
sb_sf$state <- substr(sb_sf$PWSID,1,2)
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
sb_sf$state <- substr(sb_sf$PWSID,1,2)
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
sb_sf <- !(sb_sf$state %in% c("GU","MP","VI","AS"))
table(sb_sf$state)
# Rename geom to geometry so that the EJfunction doesn't trip
sb_sf <- st_set_geometry(sb_sf, "geometry")
sb_sf_subset <- sb_sf[1:1000,]
mapview(sb_sf)
zc_data <- EJfunction(LOI_data = zipcodeboundaries,
data_year = 2021,
buffer = 0.0001,
raster = T)
zc_data <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0.0001,
raster = T)
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
sb_sf$state <- substr(sb_sf$PWSID,1,2)
zc_data <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0.0001,
raster = T)
zc_data <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0.0001,
raster = T)
my_path <- "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/Data"
getwd()
setwd(paste0(my_path))
getwd()
HB_vio <- read_rds("Data/cbg_HB_vio_combined.rds")
HB_vio <- read_rds("Data/cbg_HB_vio_combined.rds")
getwd()
library(readr)
zc_dems <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/zc_dems.csv")
View(zc_dems)
library(readr)
county_dems <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/county_dems.csv")
View(county_dems)
library(readxl)
sb_dems_area_v3 <- read_excel("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/sb_dems_area_v3.xlsx")
View(sb_dems_area_v3)
library(readxl)
sb_dems_v3 <- read_excel("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/sb_dems_v3.xlsx")
View(sb_dems_v3)
# load packages
library(readr)
library(dplyr)
library(ggplot2)
# Set file directory
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
output_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/data/indicators/'
syr3 <- load(paste0(syr_dir,"syr3.RData"))
# Tabulate Analyte Names
syr3 %>%
group_by(analyte_name) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 120)
# load packages
library(readr)
library(dplyr)
library(ggplot2)
# Set file directory
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
output_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/data/indicators/'
################################################################################
################################################################################
# Load raw Data for Indicators
################################################################################
################################################################################
################################################################################
# Six Year Review 3
################################################################################
syr3 <- load(paste0(syr_dir,"syr3.RData"))
# filter out DBPs and bacterial samples
dbp3 <- syr3 %>%
filter(analyte_name == c("TTHM","HAA5"))
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
output_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/data/indicators/'
syr3 <- load(paste0(syr_dir,"syr3.RData"))
#install.packages('devtools')
library(devtools)
# install from repository
#install_github('USEPA/EJSCREENbatch', build_vignettes=FALSE)
library(EJSCREENbatch)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
# Source modified files from EJSCREENbatch
sapply(list.files('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/pfas_npdwr_ej/2023_analysis/R', full.names=TRUE), source)
#install.packages('devtools')
library(devtools)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/USGS_boundaries/WSA_v1.shp")
View(sb)
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
View(sb_sf)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps","janitor")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/USGS_boundaries/WSA_v1.shp") %>%
clean_names()
View(sb)
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
# Import USGS boundaries
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/USGS_boundaries/WSA_v1.shp") %>%
clean_names()
# 18,000 systems
# Convert projection, rename vars, add state variable
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326) %>%
rename(pwsid = wsa_agidf) %>%
mutate(state = substr(sb_sf$pwsud,1,2))
# Convert projection, rename vars, add state variable
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326) %>%
rename(pwsid = wsa_agidf) %>%
mutate(state = substr(sb_sf$pwsid,1,2))
# Convert projection, rename vars, add state variable
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326) %>%
rename(pwsid = wsa_agidf) %>%
mutate(state = substr(pwsid,1,2))
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
sb_sf <- !(sb_sf$state %in% c("GU","MP","VI","AS"))
table(sb_sf$state)
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
# Convert projection, rename vars, add state variable
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326) %>%
rename(pwsid = wsa_agidf) %>%
mutate(state = substr(pwsid,1,2))
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
# Map The Sites - or a subset for speed
#mapview(sb_sf)
sb_sf_subset <- sb_sf[1:1000,]
mapview(sb_sf)
sb_sf <- st_set_geometry(sb_sf, "geometry")
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
table(sb_sf$state)
# Source modified files from EJSCREENbatch
sapply(list.files('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/pfas_npdwr_ej/2023_analysis/R', full.names=TRUE), source)
# Call modified EJfunction
usgs_data <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0,
raster = T)
sb_sf <-  sf::st_make_valid()
sb_sf <-  sf::st_make_valid(sb_sf)
# Map The Sites - or a subset for speed
#mapview(sb_sf)
sb_sf_subset <- sb_sf[1:1000,]
mapview(sb_sf)
# Call modified EJfunction
usgs_data <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0,
raster = T)
View(usgs_data)
usgs_data <- batch.output$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry %>%
rename(pwsid = PWSID)  %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.csv')
save <- usgs_data$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry %>%
rename(pwsid = PWSID)  %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.csv')
save <- usgs_data$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.csv')
write_xlsx(usgs_data, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.xlsx")
save <- usgs_data$EJ.loi.data$LOI_radius_2021_0mi
save <- usgs_data$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.csv')
write_xlsx(save, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.xlsx")
