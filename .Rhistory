#     percent = round((n / sum(n)), 3),
#     cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
#   print(n = 100)
zipcodeboundaries <- zipcodeboundaries  %>%
filter(!(state %in% c("GU","MP","VI","AS","PR")))
zipcodeboundaries <- st_set_geometry(zipcodeboundaries,"geometry")
chunks <- 17
chunk_size <- 1000
zip_list <- split(zipcodeboundaries, rep(1:17, each = 1000, length.out = nrow(zipcodeboundaries)))
results_list <- list()
# Call modified EJfunction over each chunk of data
for (i in 1:17) {
result <- EJfunction(LOI_data = zip_list[[i]], data_year = 2021, buffer = 0, raster = T)
results_list[[i]] <- result
}
####################################################################
#install.packages('devtools')
library(devtools)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps","janitor", "EJSCREENbatch")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
###############################################################################
# Import Locations
###############################################################################
# Service Boundaries : Last downloaded 8/2/23, using version 3.0 of the data.
# Link: https://www.hydroshare.org/resource/9ebc0a0b43b843b9835830ffffdd971e/
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/epic_boundaries/temm.gpkg")
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
# Rename geom to geometry for the EJSB function and drop unnecessary fields
sb_sf <- st_set_geometry(sb_sf, "geometry") %>%
filter(!(state_code %in% c("GU","MP","VI","AS","PR"))) %>%
select(-c('primacy_agency_code', 'city_served', 'owner_type_code',
'is_wholesaler_ind', 'centroid_lat','centroid_lon','geometry_source_detail',
'pred_05','pred_50','pred_95'))
###############################################################################
# Land Screen Call
###############################################################################
chunks <- 49
chunk_size <- 1000
epic_list <- split(sb_sf, rep(1:49, each = 1000, length.out = nrow(sb_sf)))
results_list <- list()
# Call modified EJfunction over each chunk of data
for (i in 1:49) {
result <- EJfunction(LOI_data = epic_list[[i]], data_year = 2021, buffer = 0, raster = T)
results_list[[i]] <- result
}
####################################################################
library(devtools)
#install_github('USEPA/EJSCREENbatch', force = TRUE)
list.of.packages <- c("janitor","writexl","readxl","tigris","leaflet","sf","tidyverse","EJSCREENbatch",
"tidycensus","tidyverse")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
options(tigris_use_cache = TRUE)
zipcodeboundaries<- st_read( "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ZIP_Codes_Served/UCMR_3_5/generated_boundaries_using_zip_codes.shp") %>%
st_transform(crs = 4326) %>%
dplyr::mutate(state = substr(PWSID,1,2)) %>%
sf::st_make_valid()
###############################################################################
# EJfunction over Zipcodes
###############################################################################
# Tabulate states to figure out which to drop
# tmp <- zipcodeboundaries  %>%
#   st_drop_geometry
#
# tmp %>%
#   group_by(state) %>%
#   summarise(n = n()) %>%
#   mutate(
#     totalN = (cumsum(n)),
#     percent = round((n / sum(n)), 3),
#     cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
#   print(n = 100)
zipcodeboundaries <- zipcodeboundaries  %>%
filter(!(state %in% c("GU","MP","VI","AS","PR")))
zipcodeboundaries <- st_set_geometry(zipcodeboundaries,"geometry")
#Check to see if any are outside of CONUS - keep only the zips in CONUS
# mapview(zipcodeboundaries)
# intersects <- st_intersects(zipcodeboundaries, us_states )
# tmp <- zipcodeboundaries[intersects,]
# Source modified files from EJSCREENbatch
# sapply('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/code/data_cleaning/EJSCREENBufferRaster.R', source)
# sapply(list.files('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/pfas_npdwr_ej/2023_analysis/R', full.names=TRUE), source)
chunks <- 17
chunk_size <- 1000
zip_list <- split(zipcodeboundaries, rep(1:17, each = 1000, length.out = nrow(zipcodeboundaries)))
results_list <- list()
# Call modified EJfunction over each chunk of data
for (i in 1:17) {
result <- EJfunction(LOI_data = zip_list[[i]], data_year = 2021, buffer = 0, raster = T)
results_list[[i]] <- result
}
# Call modified EJfunction over each chunk of data
for (i in 13:17) {
result <- EJfunction(LOI_data = zip_list[[i]], data_year = 2021, buffer = 0, raster = T)
results_list[[i]] <- result
}
for (i in 1:17) {
EJ.loi.data <- results_list[[i]]$EJ.loi.data
EJ.cbg.data <- results_list[[i]]$EJ.cbg.data
loi_df <- EJ.loi.data$LOI_radius_2021_0mi
cbg_df <- EJ.cbg.data$CBG_radius_2021_0mi
if (i == 1){
combined_loi <- loi_df
combined_cbg <- cbg_df
} else{
combined_loi <- rbind(combined_loi, loi_df)
combined_cbg <- rbind(combined_cbg, cbg_df, fill = TRUE)
}
}
# Save Just the zipcode data
combined_cbg <- combined_cbg %>%
st_drop_geometry %>%
rename(pwsid = PWSID)  %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/zc_dems_area.csv')
combined_cbg <- combined_cbg %>%
st_drop_geometry %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/zc_dems_area.csv')
write_xlsx(combined_cbg, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/zc_dems_area.xlsx")
combined_loi <- combined_loi %>%
st_drop_geometry %>%
rename(pwsid = PWSID)  %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/zc_dems.csv')
write_xlsx(combined_loi, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/zc_dems.xlsx")
library(devtools)
#install_github('USEPA/EJSCREENbatch', force = TRUE)
list.of.packages <- c("janitor","writexl","readxl","tigris","leaflet","sf","tidyverse","EJSCREENbatch")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
###############################################################################
# Load libraries, directories
###############################################################################
library(devtools)
#install_github('USEPA/EJSCREENbatch', force = TRUE)
list.of.packages <- c("janitor","writexl","readxl","tigris","leaflet","sf","tidyverse","EJSCREENbatch")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/PWS_121423.gdb')
sb_hm <- sb_hm %>%
clean_names() %>%
rename(pwsid = pwsid_final) %>%%>%
sb_hm <- sb_hm %>%
clean_names() %>%
rename(pwsid = pwsid_final) %>%
st_as_sf(sf_column_name=geom, crs=4326)
sb_hm <- sb_hm %>%
clean_names()
sb_hm <- sb_hm %>%
clean_names() %>%
rename(pwsid = pwsid_final) %>%
st_as_sf(sf_column_name=geom, crs=4326)
sb_hm <- sb_hm %>%
clean_names() %>%
rename(pwsid = pwsid_final) %>%
st_as_sf(sf_column_name=Shape, crs=4326)
sb_hm <- sb_hm %>%
clean_names() %>%
rename(pwsid_final = pwsid) %>%
sf::st_make_valid()  %>%
st_as_sf(sf_column_name=Shape, crs=4326)
sb_hm <- sb_hm %>%
clean_names() %>%
rename(pwsid = pwsid_final ) %>%
sf::st_make_valid()  %>%
st_as_sf(sf_column_name=Shape, crs=4326)
sb_hm <- sb_hm %>%
clean_names() %>%
rename(pwsid = pwsid_final ) %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
sb_hm <- sb_hm %>%
dplyr::rename(pwsid = pwsid_final)
sb_hm2 <- sb_hm %>%
rename(pwsid = pwsid_final)
sb_hm <- sb_hm %>%
rename(pwsid = pwsid_final)
sb_hm <- rename(sb_hm, pwsid = pwsid_final)
#
sb_hm <- sb_hm %>%
mutate(pwsid = pwsid_final)
sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/PWS_121423.gdb')
# clean dataframe
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
result <- EJfunction(LOI_data = sb_hm, data_year = 2021, buffer = 0, raster = T)
View(sb_hm)
sb_hm <- sb_hm %>%
rename(pwsid = pwsid_final)
# clean dataframe
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
# clean dataframe
sb_hm <- sb_hm %>%
clean_names()
# clean dataframe
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
#
sb_hm <- sb_hm %>%
rename(pwsid = pwsid_final)
library(devtools)
#install_github('USEPA/EJSCREENbatch', force = TRUE)
list.of.packages <- c("janitor","writexl","readxl","tigris","leaflet","sf","tidyverse","EJSCREENbatch")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
###############################################################################
# Service areas Hall & Murray
###############################################################################
# sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/PWS_121423.gdb')
sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/hall_murray_sf.shp')
# clean dataframe
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
# sb_hm <- sb_hm %>%
# rename(pwsid = pwsid_fina)
# sb_hm <- sb_hm %>%
#   rename(pwsid = pwsid_final)
# something went wrong here: Error in rename.sf(sb_hm, pwsid = pwsid_final) :
# internal error: can't find `agr` columns
###############################################################################
# Service areas Hall & Murray - EJSB Run
###############################################################################
sb_hm <- sb_hm %>%
dplyr::mutate(sb_hm, newid = row_number())
sb_hm <- sb_hm %>%
st_zm()
#result <- EJfunction(LOI_data = sb_hm, data_year = 2021, buffer = 0, raster = T)
chunks <- 28
chunk_size <- 1000
hm_list <- split(sb_hm, rep(1:28, each = 1000, length.out = nrow(sb_hm)))
results_list <- list()
# Call modified EJfunction over each chunk of data
for (i in 1:28) {
result <- EJfunction(LOI_data = hm_list[[i]], data_year = 2021, buffer = 0, raster = T)
results_list[[i]] <- result
}
# sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/PWS_121423.gdb')
sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/hall_murray_sf.shp')
# clean dataframe
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
# sb_hm <- sb_hm %>%
# rename(pwsid = pwsid_fina)
# sb_hm <- sb_hm %>%
#   rename(pwsid = pwsid_final)
# something went wrong here: Error in rename.sf(sb_hm, pwsid = pwsid_final) :
# internal error: can't find `agr` columns
###############################################################################
# Service areas Hall & Murray - EJSB Run
###############################################################################
# Adding a new ID number for joining things later.
sb_hm <- sb_hm %>%
dplyr::mutate(sb_hm, newid = row_number())
# Removing 3-dimensional features
sb_hm <- sb_hm %>%
st_zm()
#result <- EJfunction(LOI_data = sb_hm, data_year = 2021, buffer = 0, raster = T)
chunks <- 28
chunk_size <- 1000
hm_list <- split(sb_hm, rep(1:28, each = 1000, length.out = nrow(sb_hm)))
results_list <- list()
# Call modified EJfunction over each chunk of data
for (i in 1:28) {
result <- EJfunction(LOI_data = hm_list[[i]], data_year = 2021, buffer = 0, raster = T)
results_list[[i]] <- result
}
warnings()
View(sb_hm)
sb_hm <- sb_hm %>%
st_make_valid()
rm(result,results_list)
results_list <- list()
gts <- st_geometry_type(sb_hm)
unique(gts)
gts
# sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/PWS_121423.gdb')
sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/hall_murray_sf.shp')
# clean dataframe
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
sb_hm <- sb_hm %>%
st_make_valid()
# sb_hm <- sb_hm %>%
# rename(pwsid = pwsid_fina)
# sb_hm <- sb_hm %>%
#   rename(pwsid = pwsid_final)
# something went wrong here: Error in rename.sf(sb_hm, pwsid = pwsid_final) :
# internal error: can't find `agr` columns
###############################################################################
# Service areas Hall & Murray - EJSB Run
###############################################################################
gts <- st_geometry_type(sb_hm)
unique(gts)
# Adding a new ID number for joining things later.
sb_hm <- sb_hm %>%
dplyr::mutate(sb_hm, newid = row_number())
# Removing 3-dimensional features
sb_hm <- sb_hm %>%
st_zm()
sb_hm <- st_cast(sb_hm, "POLYGON")
warnings()
###############################################################################
# Service areas Hall & Murray
###############################################################################
# sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/PWS_121423.gdb')
sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/hall_murray_sf.shp')
# clean dataframe
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
sb_hm <- sb_hm %>%
st_make_valid()
# Adding a new ID number for joining things later.
sb_hm <- sb_hm %>%
dplyr::mutate(sb_hm, newid = row_number())
# Removing 3-dimensional features
sb_hm <- sb_hm %>%
st_zm()
sb_hm <- st_cast(sb_hm, "MULTIPOLYGON")
warning()
warnings()
gts <- st_geometry_type(sb_hm)
unique(gts)
# sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/PWS_121423.gdb')
sb_hm <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/hall_murray/hall_murray_sf.shp')
# clean dataframe
sb_hm <- sb_hm %>%
clean_names() %>%
sf::st_make_valid()  %>%
st_transform(crs = 4326)
sb_hm <- sb_hm %>%
st_make_valid()
# Adding a new ID number for joining things later.
sb_hm <- sb_hm %>%
dplyr::mutate(sb_hm, newid = row_number())
# Removing 3-dimensional features
sb_hm <- sb_hm %>%
st_zm()
gts <- st_geometry_type(sb_hm)
unique(gts)
sb_hm <- st_cast(sb_hm, "MULTIPOLYGON")
chunks <- 28
chunk_size <- 1000
hm_list <- split(sb_hm, rep(1:28, each = 1000, length.out = nrow(sb_hm)))
rm(result,results_list)
results_list <- list()
# Call modified EJfunction over each chunk of data
for (i in 1:28) {
result <- EJfunction(LOI_data = hm_list[[i]], data_year = 2021, buffer = 0, raster = T)
results_list[[i]] <- result
}
sb_hm <- st_cast(sb_hm, "MULTIPOLYGON")
gts <- st_geometry_type(sb_hm)
unique(gts)
#install.packages('devtools')
library(devtools)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps","janitor", "EJSCREENbatch")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
###############################################################################
# Import Locations
###############################################################################
# Service Boundaries : Last downloaded 8/2/23, using version 3.0 of the data.
# Link: https://www.hydroshare.org/resource/9ebc0a0b43b843b9835830ffffdd971e/
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/epic_boundaries/temm.gpkg")
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
# Rename geom to geometry for the EJSB function and drop unnecessary fields
sb_sf <- st_set_geometry(sb_sf, "geometry") %>%
filter(!(state_code %in% c("GU","MP","VI","AS","PR"))) %>%
select(-c('primacy_agency_code', 'city_served', 'owner_type_code',
'is_wholesaler_ind', 'centroid_lat','centroid_lon','geometry_source_detail',
'pred_05','pred_50','pred_95'))
###############################################################################
# Land Screen Call
###############################################################################
# Adding a new ID number for joining things later.
sb_sf <- sb_sf %>%
dplyr::mutate(sb_sf, newid = row_number())
chunks <- 49
chunk_size <- 1000
epic_list <- split(sb_sf, rep(1:49, each = 1000, length.out = nrow(sb_sf)))
results_list <- list()
# Call modified EJfunction over each chunk of data
for (i in 1:49) {
result <- EJfunction(LOI_data = epic_list[[i]], data_year = 2021, buffer = 0, raster = T)
results_list[[i]] <- result
}
# Need to combine all of the USGS and CBG files into one
for (i in 1:49) {
EJ.loi.data <- results_list[[i]]$EJ.loi.data
EJ.cbg.data <- results_list[[i]]$EJ.cbg.data
loi_df <- EJ.loi.data$LOI_radius_2021_0mi
cbg_df <- EJ.cbg.data$CBG_radius_2021_0mi
if (i == 1){
combined_loi <- loi_df
combined_cbg <- cbg_df
} else{
combined_loi <- rbind(combined_loi, loi_df)
combined_cbg <- rbind(combined_cbg, cbg_df)
}
}
View(combined_cbg)
cbg.shapes <- combined_cbg %>%
dplyr::left_join(data.tog %>% dplyr::select('ID'), by = 'ID') %>%
sf::st_as_sf() %>%
tibble::rowid_to_column(var = 'cbg_ID')
loi.buffer <- combined_loi
View(loi.buffer)
linking.list <- sf::st_intersects(cbg.shapes, loi.buffer) %>%
as.data.frame() %>%
dplyr::rename(cbg_ID = row.id) %>%
dplyr::rename(shape_ID = col.id) %>%
dplyr::left_join(cbg.shapes %>%
dplyr::select(cbg_ID, ID) %>%
sf::st_drop_geometry(),
by = 'cbg_ID') %>%
dplyr::left_join(loi.buffer %>%
dplyr::select(newid) %>%
sf::st_drop_geometry(),
by = 'newid') %>%
dplyr::select(-cbg_ID)
rlang::last_trace()
combined_cbg <- combined_cbg %>%
st_drop_geometry %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/epic_dems_area.csv')
# Last edited 11/30/23
###############################################################################
#install.packages('devtools')
library(devtools)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps","janitor", "EJSCREENbatch")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
combined_cbg <- combined_cbg %>%
st_drop_geometry %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/epic_dems_area.csv')
write_xlsx(combined_cbg, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/epic_dems_area.xlsx")
combined_loi <- combined_loi %>%
st_drop_geometry %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/epic_dems.csv')
write_xlsx(combined_loi, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/epic_dems.xlsx")
# Create key file to link LOIs to CBGs
cbg.shapes <- combined_cbg %>%
dplyr::left_join(data.tog %>% dplyr::select('ID'), by = 'ID') %>%
sf::st_as_sf() %>%
tibble::rowid_to_column(var = 'cbg_ID')
loi.buffer <- combined_loi
linking.list <- sf::st_intersects(cbg.shapes, loi.buffer) %>%
as.data.frame() %>%
dplyr::rename(cbg_ID = row.id) %>%
dplyr::rename(shape_ID = col.id) %>%
dplyr::left_join(cbg.shapes %>%
dplyr::select(cbg_ID, ID) %>%
sf::st_drop_geometry(),
by = 'cbg_ID') %>%
dplyr::left_join(loi.buffer %>%
dplyr::select(shape_ID) %>%
sf::st_drop_geometry(),
by = 'shape_ID') %>%
dplyr::select(-cbg_ID)
linking.list <- sf::st_intersects(cbg.shapes, sb_sf) %>%
as.data.frame() %>%
dplyr::rename(cbg_ID = row.id) %>%
dplyr::rename(shape_ID = col.id) %>%
dplyr::left_join(cbg.shapes %>%
dplyr::select(cbg_ID, ID) %>%
sf::st_drop_geometry(),
by = 'cbg_ID') %>%
dplyr::left_join(loi.buffer %>%
dplyr::select(shape_ID, newid) %>%
sf::st_drop_geometry(),
by = 'shape_ID') %>%
dplyr::select(-cbg_ID)
