zc_data <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0.0001,
raster = T)
my_path <- "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/Data"
getwd()
setwd(paste0(my_path))
getwd()
HB_vio <- read_rds("Data/cbg_HB_vio_combined.rds")
HB_vio <- read_rds("Data/cbg_HB_vio_combined.rds")
getwd()
library(readr)
zc_dems <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/zc_dems.csv")
View(zc_dems)
library(readr)
county_dems <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/county_dems.csv")
View(county_dems)
library(readxl)
sb_dems_area_v3 <- read_excel("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/sb_dems_area_v3.xlsx")
View(sb_dems_area_v3)
library(readxl)
sb_dems_v3 <- read_excel("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/sb_dems_v3.xlsx")
View(sb_dems_v3)
# load packages
library(readr)
library(dplyr)
library(ggplot2)
# Set file directory
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
output_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/data/indicators/'
syr3 <- load(paste0(syr_dir,"syr3.RData"))
# Tabulate Analyte Names
syr3 %>%
group_by(analyte_name) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 120)
# load packages
library(readr)
library(dplyr)
library(ggplot2)
# Set file directory
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
output_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/data/indicators/'
################################################################################
################################################################################
# Load raw Data for Indicators
################################################################################
################################################################################
################################################################################
# Six Year Review 3
################################################################################
syr3 <- load(paste0(syr_dir,"syr3.RData"))
# filter out DBPs and bacterial samples
dbp3 <- syr3 %>%
filter(analyte_name == c("TTHM","HAA5"))
syr_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/mdi/syr/'
output_dir <- 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/data/indicators/'
syr3 <- load(paste0(syr_dir,"syr3.RData"))
#install.packages('devtools')
library(devtools)
# install from repository
#install_github('USEPA/EJSCREENbatch', build_vignettes=FALSE)
library(EJSCREENbatch)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
# Source modified files from EJSCREENbatch
sapply(list.files('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/pfas_npdwr_ej/2023_analysis/R', full.names=TRUE), source)
#install.packages('devtools')
library(devtools)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/USGS_boundaries/WSA_v1.shp")
View(sb)
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
View(sb_sf)
# Other libraries
list.of.packages <- c("magrittr","cowplot","devtools","sf","tidyverse","magick","mapdata","sp",
"tidycensus","areal","stringr","openxlsx","readxl",
"lubridate","leaflet","biscale","mapview",
"tidyr","stringr","ggplot2","writexl","maps","janitor")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/USGS_boundaries/WSA_v1.shp") %>%
clean_names()
View(sb)
# Convert projection
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326)
# Import USGS boundaries
sb <- st_read("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/USGS_boundaries/WSA_v1.shp") %>%
clean_names()
# 18,000 systems
# Convert projection, rename vars, add state variable
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326) %>%
rename(pwsid = wsa_agidf) %>%
mutate(state = substr(sb_sf$pwsud,1,2))
# Convert projection, rename vars, add state variable
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326) %>%
rename(pwsid = wsa_agidf) %>%
mutate(state = substr(sb_sf$pwsid,1,2))
# Convert projection, rename vars, add state variable
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326) %>%
rename(pwsid = wsa_agidf) %>%
mutate(state = substr(pwsid,1,2))
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
sb_sf <- !(sb_sf$state %in% c("GU","MP","VI","AS"))
table(sb_sf$state)
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
# Convert projection, rename vars, add state variable
sb_sf <-  sb %>%
st_as_sf(sf_column_name=geom, crs=4326) %>%
rename(pwsid = wsa_agidf) %>%
mutate(state = substr(pwsid,1,2))
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
# Map The Sites - or a subset for speed
#mapview(sb_sf)
sb_sf_subset <- sb_sf[1:1000,]
mapview(sb_sf)
sb_sf <- st_set_geometry(sb_sf, "geometry")
# Tabulate states
sb_sf %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
table(sb_sf$state)
# Source modified files from EJSCREENbatch
sapply(list.files('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/pfas_npdwr_ej/2023_analysis/R', full.names=TRUE), source)
# Call modified EJfunction
usgs_data <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0,
raster = T)
sb_sf <-  sf::st_make_valid()
sb_sf <-  sf::st_make_valid(sb_sf)
# Map The Sites - or a subset for speed
#mapview(sb_sf)
sb_sf_subset <- sb_sf[1:1000,]
mapview(sb_sf)
# Call modified EJfunction
usgs_data <- EJfunction(LOI_data = sb_sf,
data_year = 2021,
buffer = 0,
raster = T)
View(usgs_data)
usgs_data <- batch.output$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry %>%
rename(pwsid = PWSID)  %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.csv')
save <- usgs_data$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry %>%
rename(pwsid = PWSID)  %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.csv')
save <- usgs_data$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.csv')
write_xlsx(usgs_data, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.xlsx")
save <- usgs_data$EJ.loi.data$LOI_radius_2021_0mi
save <- usgs_data$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.csv')
write_xlsx(save, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/usgs_dems.xlsx")
# Load libraries, directories
library(tidyverse)
library(sf)
library(leaflet)
library(tigris)
library(readxl)
library(writexl)
library(janitor)
#if not in project subfolder, navigate to main folder
# if(str_detect(getwd(), "ej_service_areas/")){
#   getwd()
#   setwd('../..')
#   getwd()
# }
#if subfolder for County boundaries does not exist, create it
mainDir <- "data/generated_boundaries/"
subDir <- "generated_boundaries_county"
getwd()
###############################################################################
# Get shapefiles and county boundaries
###############################################################################
# National map of counties
counties_map <- counties(cb=T, resolution="20m")
counties_crs <- st_crs(counties_map)
# Service areas linked to counties
sb_county <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/generated_boundaries/county/generated_boundaries_using_county.shp')
###############################################################################
# Clean county boundaries
###############################################################################
# Note must use the principal county because in many cases these overlap with multiple counties
fill.me <- vector(mode = 'list', length = dim(counties_map)[1])
for (i in 1:dim(counties_map)[1]){
fill.me[[i]] <- counties_map %>%
dplyr::slice(i) %>%
sf::st_transform(crs = 4326)
if(i %% 10 == 0){
print(paste0('Row ',i,' complete.'))
}
}
together <- data.table::rbindlist(fill.me) %>%
sf::st_as_sf(., crs = 4326) %>%
sf::st_make_valid()
###############################################################################
# EJfunction
###############################################################################
# Tabulate states
together %>%
group_by(STUSPS) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
together <- together  %>%
filter(!(STUSPS %in% c("GU","MP","VI","AS","PR")))
# Source modified files from EJSCREENbatch
sapply(list.files('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/pfas_npdwr_ej/2023_analysis/R', full.names=TRUE), source)
# Call modified EJfunction
batch.output <- EJfunction(LOI_data = together, data_year = 2021, buffer = 0, raster = T)
# Load libraries, directories
library(tidyverse)
library(sf)
library(leaflet)
library(tigris)
library(readxl)
library(writexl)
library(janitor)
#if not in project subfolder, navigate to main folder
# if(str_detect(getwd(), "ej_service_areas/")){
#   getwd()
#   setwd('../..')
#   getwd()
# }
# National map of counties
counties_map <- counties(cb=T, resolution="20m")
counties_crs <- st_crs(counties_map)
# Service areas linked to counties
sb_county <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/generated_boundaries/county/generated_boundaries_using_county.shp')
###############################################################################
install_github('USEPA/EJSCREENbatch')
library(devtools)
install_github('USEPA/EJSCREENbatch')
warnings()
library(devtools)
install_github('USEPA/EJSCREENbatch')
warnings()
library(devtools)
install.packages("fs")
install_github('USEPA/EJSCREENbatch')
library(devtools)
install.packages("usethis")
install_github('USEPA/EJSCREENbatch')
library(devtools)
install.packages("cachem")
library(devtools)
install_github('USEPA/EJSCREENbatch')
library(EJSCREENbatch)
install.packages("data.table")
install_github('USEPA/EJSCREENbatch')
install_github('USEPA/EJSCREENbatch', force = TRUE)
library(EJSCREENbatch)
# National map of counties
counties_map <- counties(cb=T, resolution="20m")
install.packages("tigris")
library(tigris)
# National map of counties
counties_map <- counties(cb=T, resolution="20m")
counties_crs <- st_crs(counties_map)
library(sf)
# National map of counties
counties_map <- counties(cb=T, resolution="20m")
counties_crs <- st_crs(counties_map)
# Service areas linked to counties
sb_county <- sf::st_read('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/generated_boundaries/county/generated_boundaries_using_county.shp')
fill.me <- vector(mode = 'list', length = dim(counties_map)[1])
for (i in 1:dim(counties_map)[1]){
fill.me[[i]] <- counties_map %>%
dplyr::slice(i) %>%
sf::st_transform(crs = 4326)
if(i %% 10 == 0){
print(paste0('Row ',i,' complete.'))
}
}
together <- data.table::rbindlist(fill.me) %>%
sf::st_as_sf(., crs = 4326) %>%
sf::st_make_valid()
# Tabulate states
together %>%
group_by(STUSPS) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
library(dplyr)
# Tabulate states
together %>%
group_by(STUSPS) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
together <- together  %>%
filter(!(STUSPS %in% c("GU","MP","VI","AS","PR")))
# Call modified EJfunction
batch.output <- EJfunction(LOI_data = together, data_year = 2021, buffer = 0, raster = T)
county_data <- batch.output$EJ.loi.data$LOI_radius_2021_0mi %>%
st_drop_geometry
pws_county_dems <- left_join(sb_county,  county_data, by = 'GEOID' )  %>%
st_drop_geometry
# Save output from batch tool
pws_county_dems %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/county_dems.csv')
library(writexl)
pws_county_dems %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/county_dems.csv')
install.packages("write_csv")
library(readr)
pws_county_dems %>%
write_csv( 'C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/county_dems.csv')
write_xlsx(pws_county_dems, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/county_dems.xlsx")
us_states <- get_acs(
geography = "state",
variables = "B01002_001",
year = 2020,
survey = "acs1",
geometry = TRUE,
resolution = "20m"
) %>%
st_transform(4326)
library(devtools)
#install_github('USEPA/EJSCREENbatch', force = TRUE)
list.of.packages <- c("janitor","writexl","readxl","tigris","leaflet","sf","tidyverse","EJSCREENbatch",
"tidycensus","tidyverse")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.rstudio.com/")
lapply(list.of.packages, library, character.only = TRUE)
us_states <- get_acs(
geography = "state",
variables = "B01002_001",
year = 2020,
survey = "acs1",
geometry = TRUE,
resolution = "20m"
) %>%
st_transform(4326)
us_states <- get_acs(
geography = "state",
variables = "B01002_001",
year = 2020,
survey = "acs5",
geometry = TRUE,
resolution = "20m"
) %>%
st_transform(4326)
st_crs(us_states)
#plot(us_states$geometry)
# Get data from the 2016-2020 5-year ACS
us_states <- get_acs(
geography = "state",
variables = "B01002_001",
year = 2020,
survey = "acs5",
geometry = TRUE,
resolution = "20m"
) %>%
st_transform(4326)
st_crs(us_states)
#plot(us_states$geometry)
#==============================================================================
#---------------------------ZIP CODES------------------------------------------
#==============================================================================
#Use UCMR 3 & 4 for now. Can add or replace with UCMR 5 later when available.
# ucmr5 <- https://www.epa.gov/dwucmr/occurrence-data-unregulated-contaminant-monitoring-rule#5
zip_links <- c("https://www.epa.gov/sites/default/files/2017-02/ucmr-3-occurrence-data.zip",
"https://www.epa.gov/sites/default/files/2020-04/ucmr_4_occurrence_data.zip",
"https://www.epa.gov/system/files/other-files/2023-08/ucmr5-occurrence-data.zip")
names(zip_links) <- c("ucmr3", "ucmr4", "ucmr5")
for(i in 1:length(zip_links)){
temp <- tempfile()
download.file(zip_links[i],temp)
con <- unz(temp, paste0(toupper(names(zip_links)[i]),"_ZipCodes.txt"))
data.zip <- read.table(con, header=T, skip=0, fill=T) %>%
write_csv(paste0("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/ucmr/zipcode_areas/",names(zip_links)[i],".csv"))
head(data.zip)
assign(names(zip_links)[i], data.zip)
unlink(temp)
}
zipcodeboundaries<- st_read( "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ZIP_Codes_Served/UCMR_3_5/generated_boundaries_using_zip_codes.shp") %>%
st_transform(crs = 4326) %>%
dplyr::mutate(state = substr(PWSID,1,2)) %>%
sf::st_make_valid()
# Tabulate states to figure out which to drop
zipcodeboundaries <- zipcodeboundaries  %>%
dplyr::mutate(state = substr(PWSID,1,2))
zipcodeboundaries %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
zipcodeboundaries <- zipcodeboundaries  %>%
filter(!(state %in% c("GU","MP","VI","AS","PR")))
zipcodeboundaries <- st_set_geometry(zipcodeboundaries,"geometry")
# Source modified files from EJSCREENbatch
sapply(list.files('C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/pfas_npdwr_ej/2023_analysis/R', full.names=TRUE), source)
# Call modified EJfunction
batch.output <- EJfunction(LOI_data = zipcodeboundaries, data_year = 2021, buffer = 0, raster = T)
zipcodeboundaries<- st_read( "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ZIP_Codes_Served/UCMR_3_5/generated_boundaries_using_zip_codes.shp") %>%
st_transform(crs = 4326) %>%
dplyr::mutate(state = substr(PWSID,1,2)) %>%
sf::st_make_valid()
###############################################################################
# EJfunction over Zipcodes
###############################################################################
# Tabulate states to figure out which to drop
zipcodeboundaries <- zipcodeboundaries  %>%
dplyr::mutate(state = substr(PWSID,1,2))
zipcodeboundaries %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
# Tabulate states to figure out which to drop
tmp <- zipcodeboundaries  %>%
dplyr::mutate(state = substr(PWSID,1,2)) %>%
st_drop_geometry
tmp %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
zipcodeboundaries <- zipcodeboundaries  %>%
filter(!(state %in% c("GU","MP","VI","AS","PR")))
# Tabulate states to figure out which to drop
tmp <- zipcodeboundaries  %>%
dplyr::mutate(state = substr(PWSID,1,2)) %>%
st_drop_geometry
tmp %>%
group_by(state) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
zipcodeboundaries <- st_set_geometry(zipcodeboundaries,"geometry")
# Call modified EJfunction
batch.output_zip <- EJfunction(LOI_data = zipcodeboundaries, data_year = 2021, buffer = 0, raster = T)
