library(readr)
SDWA_LCR_SAMPLES <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/sdwis/SDWA_LCR_SAMPLES.csv")
View(SDWA_LCR_SAMPLES)
SDWA_violations <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/sdwis/SDWA_Violations.csv")
install.packages("xfun")
install.packages("xfun")
knitr::opts_chunk$set(echo = TRUE)
SDWA_violations <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/sdwis/SDWA_VIOLATIONS.csv")
SDWA_LCR_SAMPLES <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/sdwis/SDWA_LCR_SAMPLES.csv")
library(readr)
SDWA_violations <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/DWDB/Data/sdwis/SDWA_Violations.csv")
View(SDWA_violations)
SDWA_violations <- SDWA_violations %>%
filter(HEALTH_BASED == "Y")
library(dplyr)
SDWA_violations <- SDWA_violations %>%
filter(HEALTH_BASED == "Y")
# Check analytes
SDWA_violations %>%
group_by(HEALTH_BASED) %>%
summarise(n = n()) %>%
mutate(
totalN = (cumsum(n)),
percent = round((n / sum(n)), 3),
cumuPer = round(cumsum(freq = n / sum(n)), 3)) %>%
print(n = 100)
save(SDWA_violations, file = "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/water quality/SDWA_vios_healthbased.Rdata")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
readr,
tidyverse,
sf, # vector data operations
raster, # raster data operations
exactextractr, # fast raster data extraction for polygons
maps, # to get county boundary data
data.table, # data wrangling
dplyr, # data wrangling
lubridate, # Date object handling
tmap, # for map creation
modelsummary, # regression table generation
future.apply, # parallel computation
cdlTools, # download CDL data
rgdal, # required for cdlTools
prism, # download PRISM data
stringr, # string manipulation
magrittr,
tidycensus,
mapview
)
setwd("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/")
setwd("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/")
setwd("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/")
setwd("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/")
# setwd("C:/Users/tbardot/OneDrive - Environmental Protection Agency (EPA)/Documents/R_GIS/")
LCR_samp <- read_csv("data/water_quality/SDWA_LCR_SAMPLES.csv")
LCR_samp <- read_csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/water_quality/SDWA_LCR_SAMPLES.csv")
LCR_samp <- read_csv("data/water quality/SDWA_LCR_SAMPLES.csv")
SDWA_violations <- read_csv("data/water quality/SDWA_VIOLATIONS.csv")
#find the samples exceeding 0.015 mg/l lead and group by PWSID
LCR_exc <- LCR_samp %>%
filter(SAMPLE_MEASURE > 0.015)
#get counts for number of violations by PWSID
PWSID_LCR_exc <- LCR_exc %>%
group_by(PWSID) %>%
mutate(total_violations = n())
#Now select the max sample measure for each PSWID
PWSID_LCR_2 <- PWSID_LCR_exc %>%
ungroup(PWSID) %>%
filter(SAMPLE_MEASURE == max(SAMPLE_MEASURE), .by = PWSID)
#We now want to clean this data up, keeping only the total number of violations per PWSID and the maximum contamination in each
LCR_violations_per_PWSID <- PWSID_LCR_2 %>%
select(PWSID, SAMPLE_MEASURE, UNIT_OF_MEASURE, total_violations, SAMPLING_END_DATE) %>%
rename(Maximum_sample_exceedence = SAMPLE_MEASURE) %>%
rename(Units = UNIT_OF_MEASURE)
library(future.apply)
library(parallel)
LCR_violations_per_PWSID <- PWSID_LCR_2 %>%
select(PWSID, SAMPLE_MEASURE, UNIT_OF_MEASURE, total_violations, SAMPLING_END_DATE) %>%
rename(Maximum_sample_exceedence = SAMPLE_MEASURE) %>%
rename(Units = UNIT_OF_MEASURE)
#Now select the max sample measure for each PSWID
PWSID_LCR_2 <- PWSID_LCR_exc %>%
ungroup(PWSID) %>%
filter(SAMPLE_MEASURE == max(SAMPLE_MEASURE), .by = PWSID)
LCR_violations_per_PWSID <- PWSID_LCR_2 %>%
select(PWSID, SAMPLE_MEASURE, UNIT_OF_MEASURE, total_violations, SAMPLING_END_DATE) %>%
rename(Maximum_sample_exceedence = SAMPLE_MEASURE) %>%
rename(Units = UNIT_OF_MEASURE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
readr,
tidyverse,
sf, # vector data operations
raster, # raster data operations
exactextractr, # fast raster data extraction for polygons
maps, # to get county boundary data
data.table, # data wrangling
dplyr, # data wrangling
lubridate, # Date object handling
tmap, # for map creation
modelsummary, # regression table generation
future.apply, # parallel computation
cdlTools, # download CDL data
rgdal, # required for cdlTools
prism, # download PRISM data
stringr # string manipulation
)
LCR_violations_per_PWSID <- PWSID_LCR_2 %>%
select(PWSID, SAMPLE_MEASURE, UNIT_OF_MEASURE, total_violations, SAMPLING_END_DATE) %>%
rename(Maximum_sample_exceedence = SAMPLE_MEASURE) %>%
rename(Units = UNIT_OF_MEASURE)
LCR_violations_per_PWSID <- PWSID_LCR_2 %>%
dplyr::select(PWSID, SAMPLE_MEASURE, UNIT_OF_MEASURE, total_violations, SAMPLING_END_DATE) %>%
rename(Maximum_sample_exceedence = SAMPLE_MEASURE) %>%
rename(Units = UNIT_OF_MEASURE)
write.csv(LCR_violations_per_PWSID, "C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
LCR_violations <- read.csv("ej_service_areas/data/indicators/LCR_violations_per_PWSID.csv")
PWSID_geodemog_data <- read.csv("data/demographics/sb_dems_area_v3.csv")
PWSID_geodemog_data <- read.csv("C:/Users/gaustin/OneDrive - Environmental Protection Agency (EPA)/NCEE - Water System Service Boundaries/data/demographics/sb_dems_area_v3.csv")
PWSID_geodemog_data <- read_excel("data/demographics/sb_dems_area_v3.xlsx")
library(readxl)
PWSID_geodemog_data <- read_excel("data/demographics/sb_dems_area_v3.xlsx")
LCR_viol_2 <- LCR_viol_inner %>%
group_by(ID) %>%
mutate(AVG_CBG_viol= mean(total_violations)) %>%
distinct(ID, .keep_all = TRUE)
LCR_viol_inner <- inner_join(LCR_violations, PWSID_geodemog_data, by = "PWSID")
rename(PWSID_geodemog_data, PWSID = pwsid)
PWSID_geodemog_data <- PWSID_geodemog_data %>%
rename(PWSID = pwsid)
LCR_viol_inner <- inner_join(LCR_violations, PWSID_geodemog_data, by = "PWSID")
LCR_viol_2 <- LCR_viol_inner %>%
group_by(ID) %>%
mutate(AVG_CBG_viol= mean(total_violations)) %>%
distinct(ID, .keep_all = TRUE)
epic_data <- st_read("epic_boundaries/temm.gpkg")
epic_boundaries <-  epic_data %>%
st_as_sf(sf_column_name=geom, crs=4326)
## Remove missing boundaries
epic_areas <- epic_data %>%
filter(!st_is_empty(.)) %>%
rename(PWSID = pwsid)
st_write(epic_areas, "generated_boundaries_from_epic.shp")
popup_id <- paste0("<strong>Name: </strong>",
epic_areas$pws_name)
#mapping the epic areas
library(leaflet)
leaflet(data= epic_areas) %>%
setView(-81,35, zoom=6) %>%
addTiles %>%
addPolygons(popup = popup_id)
##combine Epic boundaries with LCR violations data
LCR_viol_geodata <- inner_join(LCR_viol_2, epic_areas, by = "PWSID") %>%
distinct(ID, .keep_all = TRUE)
LCR_viol_geo_sf <- st_as_sf(LCR_viol_geodata)
LCR_plot_CA <- ggplot(data = LCR_viol_CA, aes(fill = AVG_CBG_viol)) +
geom_sf()
LCR_viol_CA <- LCR_viol_geo_sf %>%
filter(ST_ABBREV == "CA")
###Plot using ggplot2
LCR_plot_CA <- ggplot(data = LCR_viol_CA, aes(fill = AVG_CBG_viol)) +
geom_sf()
##make a subset for testing
LCR_viol_IL <- LCR_viol_geo_sf %>%
filter(ST_ABBREV == "IL")
LCR_plot_IL <- ggplot(data = LCR_viol_IL, aes(fill = AVG_CBG_viol)) +
geom_sf()
LCR_plot_IL
LCR_viol_CA <- LCR_viol_geo_sf %>%
filter(ST_ABBREV == "CA")
###Plot using ggplot2
LCR_plot_CA <- ggplot(data = LCR_viol_CA, aes(fill = AVG_CBG_viol)) +
geom_sf()
LCR_plot_CA
tmap_mode("view")
tm_shape(LCR_viol_CA) +
tm_polygons(col = "AVG_CBG_viol", midpoint = 0) +
tm_basemap("Esri.WorldTopoMap")
